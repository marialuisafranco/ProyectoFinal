artistas=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
DF_artistas=data.frame(nombre,instrumento,edad,vivo)
DF_artistas
View(DF_artistas)
edad[9]=42
View(DF_artistas)
nombre[6,]
artistas[6,]
artistas=DF_artistas
artistas[6,]
View(artistas)
nombre(artistas)
tail(students,4)
tail(artistas,4)
artistas[6,]
str(DF_artistas)
edad[9]=42
artistas=DF_artistas
tail(artistas,4)
artistas[6,]
# Creacion de vectores
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
# Creacion de DataFrame "artistas"
DF_artistas=data.frame(nombre,instrumento,edad,vivo)
DF_artistas
str(DF_artistas)
# Muestre los primeros casos de artistas
#Genere el código para cambiar la edad de Elvis Presley por 42
edad[9]=42
#Genere el código para mostrar la información completa del artista que toca el bajo
artistas=DF_artistas
tail(artistas,4)
artistas[6,]
#Genere el código para mostrar el instrumento de los artistas que superan los 60 años y se encuentran vivos
#Genere un objeto que contenga la información de artistas ordenada de menor a mayor por edad. El objeto debe llamarse artistas_ordenada
# Creacion de vectores
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
# Creacion de DataFrame "artistas"
DF_artistas=data.frame(nombre,instrumento,edad,vivo)
DF_artistas
str(DF_artistas)
# Muestre los primeros casos de artistas
#Genere el código para cambiar la edad de Elvis Presley por 42
edad[9]=42
#Genere el código para mostrar la información completa del artista que toca el bajo
artistas=DF_artistas
artistas[6,]
#Genere el código para mostrar el instrumento de los artistas que superan los 60 años y se encuentran vivos
#Genere un objeto que contenga la información de artistas ordenada de menor a mayor por edad. El objeto debe llamarse artistas_ordenada
artistas=DF_artistas
artistas[6,]
str(DF_artistas)
artistas=DF_artistas
artistasCopy=artistas
artistasCopy[9,3]=42
# Creacion de vectores
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
# Creacion de DataFrame "artistas"
DF_artistas=data.frame(nombre,instrumento,edad,vivo)
DF_artistas
str(DF_artistas)
artistas=DF_artistas
# Muestre los primeros casos de artistas
#Genere el código para cambiar la edad de Elvis Presley por 42
artistasCopy=artistas
artistasCopy[9,3]=42
#Genere el código para mostrar la información completa del artista que toca el bajo
artistas[6,]
#Genere el código para mostrar el instrumento de los artistas que superan los 60 años y se encuentran vivos
#Genere un objeto que contenga la información de artistas ordenada de menor a mayor por edad. El objeto debe llamarse artistas_ordenada
View(artistasCopy)
artistas[9,3]=42
instrumendo[artistas$edad>60 & artistas$vivo==TRUE]
artistas[artistas$edad>60 & artistas$vivo==TRUE]
artistas[artistas$edad>60]
artistas[artistas$edad>60,]
artistas[artistas$edad>60 & artistas$vivo=TRUE,]
artistas[artistas$edad>60]
artistas[artistas$edad>60,]
instrumento[artistas$edad>60,]
artistas[artistas$edad>60,]
artistas[artistas$edad>60 & artistas==TRUE,]
artistas[artistas$edad>60 & artistas$vivo==TRUE,]
artistas[artistas$edad>60 & artistas$vivo==TRUE,][,2]
unique(artistas[artistas$edad>60 & artistas$vivo==TRUE,][,2])
head(artistas,3)
head(artistas,4)
# Creacion de vectores
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
# Creacion de DataFrame "artistas"
DF_artistas=data.frame(nombre,instrumento,edad,vivo)
DF_artistas
str(DF_artistas)
artistas=DF_artistas
# Muestre los primeros casos de artistas
head(artistas,4)
#Genere el código para cambiar la edad de Elvis Presley por 42
artistas[9,3]=42
#Genere el código para mostrar la información completa del artista que toca el bajo
artistas[6,]
#Genere el código para mostrar el instrumento de los artistas que superan los 60 años y se encuentran vivos
unique(artistas[artistas$edad>60 & artistas$vivo==TRUE,][,2])
#Genere un objeto que contenga la información de artistas ordenada de menor a mayor por edad. El objeto debe llamarse artistas_ordenada
head(artistas,4)
artistas_ordenada= artistas[order(artistas$edad)]
artistas_ordenada= artistas[order(artistas$edad),]
View(artistas_ordenada)
nombre=c("George Harrison", "Mick Jagger", "John Lennon", "Paul McCartney",
"Jimmy Page", "Joe Perry")
banda = c("The Beatles", "The Rolling Stones", "The Beatles", "The Beatles",
"Led Zeppelin", "Aerosmith")
grammy=c(28, 4, 28, 28, 5, 4)
# Creacion de DataFrame "artistas"
DF_bandas=data.frame(nombre,banda,grammy)
DF_bandas
str(DF_bandas)
bandas=DF_bandas
View(bandas)
unique(artistas[artistas$edad>60 & artistas$vivo,][,2])
# Creacion de vectores
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
# Creacion de DataFrame "artistas"
DF_artistas=data.frame(nombre,instrumento,edad,vivo)
DF_artistas
str(DF_artistas)
artistas=DF_artistas
# Muestre los primeros casos de artistas
head(artistas,4)
#Genere el código para cambiar la edad de Elvis Presley por 42
artistas[9,3]=42
#Genere el código para mostrar la información completa del artista que toca el bajo
artistas[6,]
#Genere el código para mostrar el instrumento de los artistas que superan los 60 años y se encuentran vivos
unique(artistas[artistas$edad>60 & artistas$vivo,][,2])
#Genere un objeto que contenga la información de artistas ordenada de menor a mayor por edad. El objeto debe llamarse artistas_ordenada
artistas_ordenada= artistas[order(artistas$edad),]
#Cree una data frame con los siguientes vectores. El nombre de la data frame debe ser “bandas”
# Creacion de vectores
nombre=c("George Harrison", "Mick Jagger", "John Lennon", "Paul McCartney",
"Jimmy Page", "Joe Perry")
banda = c("The Beatles", "The Rolling Stones", "The Beatles", "The Beatles",
"Led Zeppelin", "Aerosmith")
grammy=c(28, 4, 28, 28, 5, 4)
# Creacion de DataFrame "artistas"
DF_bandas=data.frame(nombre,banda,grammy)
DF_bandas
str(DF_bandas)
bandas=DF_bandas
#Junte la información de artistas y bandas utilizando el comando merge. La data frame a generar debe llamarse artistas_total
#Genere el código para consultar el número de filas (casos) de la data frame artistas_total
# Genere el código para mostrar el nombre de la banda del artista con mayor edad
# Genere el código para ordenar el número de grammys ganados de mayor a menor
# Muestre los nombres de los artistas con menos de 5 grammys ganados
# Muestre el instrumento de la edad máxima de los artistas de The Beatles
artistas_total=merge(artistas, banda)
View(artistas_total)
artistas_total=merge(artistas, bandas)
View(artistasCopy)
View(artistas_total)
View(artistasCopy)
nrow(artistas_total)
unique(artistas[wich.max(artistas$edad)],][,5])
artistas[wich.max(artistas$edad)],][,5]
artistas[wich.max(artistas$edad),][,2]
artistas_total[which.max(students$ages),]
artistas_total[which.max(artistas$ages),]
artistas_total[which.max(artistas$ages),] [,6]
# Creacion de vectores
nombre=c( "George Harrison", "Mick Jagger", "Tom Jones", "Davy Jones",
"John Lennon", "Paul McCartney", "Jimmy Page", "Joe Perry", "Elvis Presley")
instrumento=c("Guitarra", "Voz", "Voz", "Voz", "Guitarra", "Bajo",
"Guitarra", "Guitarra", "Voz")
edad = c( 58, 74, 78, 66, 40, 75, 74, 67, 62)
vivo = c(F,T,T,F,F,T,T,T,F)
# Creacion de DataFrame "artistas"
DF_artistas=data.frame(nombre,instrumento,edad,vivo)
DF_artistas
str(DF_artistas)
artistas=DF_artistas
# Muestre los primeros casos de artistas
head(artistas,4)
#Genere el código para cambiar la edad de Elvis Presley por 42
artistas[9,3]=42
#Genere el código para mostrar la información completa del artista que toca el bajo
artistas[6,]
#Genere el código para mostrar el instrumento de los artistas que superan los 60 años y se encuentran vivos
unique(artistas[artistas$edad>60 & artistas$vivo,][,2])
#Genere un objeto que contenga la información de artistas ordenada de menor a mayor por edad. El objeto debe llamarse artistas_ordenada
artistas_ordenada= artistas[order(artistas$edad),]
#Cree una data frame con los siguientes vectores. El nombre de la data frame debe ser “bandas”
# Creacion de vectores
nombre=c("George Harrison", "Mick Jagger", "John Lennon", "Paul McCartney",
"Jimmy Page", "Joe Perry")
banda = c("The Beatles", "The Rolling Stones", "The Beatles", "The Beatles",
"Led Zeppelin", "Aerosmith")
grammy=c(28, 4, 28, 28, 5, 4)
# Creacion de DataFrame "artistas"
DF_bandas=data.frame(nombre,banda,grammy)
DF_bandas
str(DF_bandas)
bandas=DF_bandas
#Junte la información de artistas y bandas utilizando el comando merge. La data frame a generar debe llamarse artistas_total
artistas_total=merge(artistas, bandas)
#Genere el código para consultar el número de filas (casos) de la data frame artistas_total
nrow(artistas_total)
# Genere el código para mostrar el nombre de la banda del artista con mayor edad
artistas_total[which.max(artistas$ages),] [,6]
# Genere el código para ordenar el número de grammys ganados de mayor a menor
# Muestre los nombres de los artistas con menos de 5 grammys ganados
# Muestre el instrumento de la edad máxima de los artistas de The Beatles
artistas_total[which.max(artistas$ages),] [,6]
library(RColorBrewer)
library(classInt)
#variable a colorear
varToPLot=mapCol_idh$cluster
# decidir color:
unique(varToPLot)
aggregate(mapCol_idh@data[,c(10,11,12)],
by=list(mapCol_idh@data$cluster),FUN=mean)
#preparo colores
numberOfClasses = length(unique(varToPLot))
plot(mapCol,col='grey',border=F)
# grafico mapa cluster
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(mapCol_idh, col = paleta[varToPLot],border=F,add=T)
legend('top', legend = c("LOW","UP","MEDIUM"),
fill = paleta,
cex = 0.7,
bty = "n",
title="conglomerado")
# Chunk 1: getData
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
names(colb)
# Chunk 2: estadisticos
library(stargazer)
stargazer(colb ,title = "Medidas estadisticas", label = "stats",summary.stat = c("n", "median","mean","min","max"))
# Chunk 3: barplots
par(mfrow=c(2,2))
hist(colb$IDH)
###
hist(colb[,3])
#####
hist(colb[,4])
colb$cabeLog=log(colb[,3])
colb$restoLog=log(colb[,4])
hist(colb$cabeLog)
hist(colb$restoLog)
# Chunk 4: corrDem
library(stargazer)
explanans=names(colb)[c(7:8)] # usando las logs
corrDem=cor(colb$IDH,colb[,explanans],
use = "na.or.complete")
stargazer(corrDem, title="Correlación de IDH con las demás variables",label = "corrDem")
# Chunk 5: corrTableX
# y la correlación entre las variables independientes:
corrTableX=round(cor(colb[,explanans],
use = "na.or.complete"),2)
corrTableX_copy=corrTableX
corrTableX[upper.tri(corrTableX)]<-""
#ver:
corrTableX
# visualmente:
stargazer(corrTableX, title="Correlación entre variables independientes",label = 'corrTableX')
#(plot(colb[,explanans])
# Chunk 6: corrPlotX
library(corrplot)
corrplot(corrTableX_copy, type = "lower", diag = F,
addCoef.col = "black")
# Chunk 7: regresiones
LinRegA = lm(IDH ~ ., data = colb[,c(1,7)])
LinRegB = lm(IDH ~ ., data = colb[,c(1,7:8)])
# Chunk 8: regresionesPlot
stargazer(LinRegA,LinRegB,
title = "Modelos de Regresión",
label = "regresiones")
# Chunk 9: getMap
library(rgdal)
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
# Chunk 10: Clusters
library(rgdal)
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
names(mapCol_idh)
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
dataCluster=mapCol_idh@data[,c(dimensions)]
dataCluster[,-1]=scale(dataCluster[,-1])
resultado=kmeans(dataCluster[,-1],3)
clusters=as.data.frame(resultado$cluster)
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
#names(mapCol_idh)
# Chunk 11: plotMapf
# grafico mapa basico
## a pintar:
library(RColorBrewer)
library(classInt)
#variable a colorear
varToPLot=mapCol_idh$cluster
# decidir color:
unique(varToPLot)
aggregate(mapCol_idh@data[,c(10,11,12)],
by=list(mapCol_idh@data$cluster),FUN=mean)
#preparo colores
numberOfClasses = length(unique(varToPLot))
plot(mapCol,col='grey',border=F)
# grafico mapa cluster
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(mapCol_idh, col = paleta[varToPLot],border=F,add=T)
legend('top', legend = c("LOW","UP","MEDIUM"),
fill = paleta,
cex = 0.7,
bty = "n",
title="conglomerado")
setwd("~/GitHub/ProyectoFinal")
